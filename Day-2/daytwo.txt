For(i=0;i<n;i++)
{
For(j=0;j<I;j++j)
{
statement;
}
}
I     j
   So when I  0---------0times
1-------1 times
2------2 times
So 1+2+3------n=n(n+1)/2
=(n square+n)/2
O(n square)

n=3
p=0
for(i=1;p<=n;i++)
{
p=p+i;
}


Not n times assuming
When will stop when p>n
P=k(k+1)/2   bcs 1+2+------k
P=k square >n
So n=sqrt of n
Time complexity O(sqrt(n))


For(i=1;i<n;i*2)
{
Statement;
}

Analysis
I=1     1 time
I=2     2 times  (1*2)
I=3      4 times     (1*2)*2=2   power 2
1=4         8 times   (1*2)*2)*2=2 power3


For(i=n;i>=1;i/2)
{
Statements;
}
1
N
n/2
n/2 power 2
..
n/2 power k
assume i<1 it stops right?
n/2 power k<1
n/2 power k=1
n=2 power k
k=log n base 2 so O(log n)


DERIVATION FORMULAE
For(i=0;i<n;i++)………..O(n)
For(i=0;i<n;i+2)………..O(n)
For(i=n;i>1;i--)………..O(n)


For(i=1;i<n;i*2)………..O(log n base 2)
For(i=1;i<n;i*3)………..O(log n base 3)
For(i=n;i>1;i=i/2)………..O(log n base 2)

NAME OF THE COMPLEXITY
•	Constant time complexity: O(1)…..
•	Linear time complexity: O(n)
•	Logarithmic time complexity: O(log n)….
•	Quadratic time complexity: O(n²)….
•	Exponential time complexity: O(2^n)

FINAL SUMMARY:
I++  i--    i+2     O(n)
I*2   i/2         log(n)    base 2
P=0
For p<n i++
P=p+i
O(sqrt(n))
  
SPACE COMPLEXITY
Parallel concepts to time complexity.
Array of size n, require O(n) space
2D array of array size n*n: O(n2) space.

Linear search         O(1)
Merge sort              O(n)
DFS                          O(n)
BFS                            O(n)
Dynamic programming      O(n²)or O(n*m)
-------------------------------
BIG-O   notation:
Omega notation:
Theta notation:
-------------------------------
Big-O notation:



SPACE COMPLEXITY:

Space complexity is parallel to time complexity
For 1d array order(n)
2d array O(n²)
Same amount of space regardless of input size of n
Eg:
1	sum of array elements
2	Linear search
Why it is o(1)
Space is not depending on values

Quick sort 
Big-o(n)
Log-linear complexity :O(nlogn)
When the space complexity of an algorithm grows proportionally to the input size 
And a logarithmic factor
